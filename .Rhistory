lines(x,p1[,2],col="purple")
lines(x,p1[,3],col="purple")
predict(fit,data.frame(x=3), interval="prediction")
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
par(mfrow=c(1,2))
plot(x,y)
abline(fit,col="red")
plot(x/2,y)
abline(fit2,col="red")
summary(fit)$coefficients
fit3<-lm(y~I(x/100))
summary(fit3)$coefficients
help(mtcars)
summary(fit)
c<-5
cf1<-summary(fit)$coefficients
cf1
fit4<-lm(y~I(x+c)) # add some constant c
cf2<-summary(fit4)$coefficients
cf2
b0<-cf1[1,1]
b1<-cf1[2,1]
c(b0,b1)
b0 - c*b1
fitRes <- fit$residuals ^ 2
fitIntercept <- lm(mpg ~ 1, mtcars)
fitInterceptRes <- fitIntercept$residuals ^ 2
sum(fitRes) /sum(fitInterceptRes) # 0.2471672
sum(resid(fit))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain
caret::featurePlot(x=training[,c(1:8)],
y = training$CompressiveStrength,
plot="pairs")
# Parece que age es el que muestra el efecto "escalera" y no
ggplot2::qplot(training$Age,
training$CompressiveStrength)
ggplot2::qplot(training$CompressiveStrength,
training$Age)
ggplot2::qplot(training$FlyAsh,
training$CompressiveStrength)
# Igualmente con qplot: FlyAsh parece que no predice nada
# Pero lo que te pide es COLOREAR POR CADA UNO DE LOS PREDICTORES!!!!
ggplot2::qplot(sort(as.integer(rownames(training))),
training$CompressiveStrength,
colour = cut2(training$Age, g = 5))
# ¡¡¡PERFECTO SE VE PERFECTO!!
ggplot2::qplot(sort(as.integer(rownames(training))),
training$CompressiveStrength,
colour = cut2(training$FlyAsh, g = 5))
# para nada se ve ese efecto, mezcla total de colores
# más simple con dos intervalos nada más
ggplot2::qplot(sort(as.integer(rownames(training))),
training$CompressiveStrength,
colour = cut2(training$FlyAsh, g = 2))
ggplot2::qplot(sort(as.integer(rownames(training))),
training$CompressiveStrength,
colour = cut2(training$Age, g = 2))
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
SuperPlasticizer
head(training)
dim(training)
x<-training$Superplasticizer<=0
dim(x)
x
plot(training$Superplasticizer)
x<-training$Superplasticizer<0
x
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
# Make a histogram and confirm the SuperPlasticizer variable is skewed.
# Normally you might use the log transform to try to make the data more symmetric.
# Why would that be a poor choice for this variable?
summary(training)
hist(training$Superplasticizer)
# There are values of zero so when you take the log() transform those values will be -Inf.
# The log transform does not reduce the skewness of the non-zero values of SuperPlasticizer
# The log transform produces negative values which can not be used by some classifiers.
# The log transform is not a monotone transformation of the data.
summary(log(training))
hist(log(training$Superplasticizer))
qqnorm(training$Superplasticizer)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Find all the predictor variables in the training set that begin with IL.
# Perform principal components on these variables with the preProcess()
# function from the caret package. Calculate the number of principal components
# needed to capture 80% of the variance. How many are there?
# 12
# 10
# 11
#  7
names(training)
grep(glob2rx("IL*"), names(training))
# Extraemos estas variables
training2 <- training[, grep(glob2rx("IL*"), names(training))]
names(training2)
pp <- preProcess(training2,
method="pca",
thresh = 0.9) # buenísimo esto: pones tu objetivo de varianza explicada
pp
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grep(glob2rx("IL*"), names(training))
training2 <- training[, c(1,grep(glob2rx("IL*"), names(training)))] # grep saca índices de columnas
names(training2)
inTrain <- createDataPartition(y = training2$diagnosis,
## the outcome data are needed
p = .80,
## The percentage of data in the
## training set
list = FALSE) ## The format of the results
nrow(inTrain)
nrow(training2)
training <- training2[ inTrain,]
testing <- training2[-inTrain,]
nrow(training)
nrow(testing)
# Proceso *SIN* PCA
glmFit <- train(diagnosis ~ .,
data = training,
method = "glm")
glmFit
pred <- predict(glmFit, newdata = testing)
confusionMatrix(pred, testing$diagnosis)
#               Accuracy : 0.6735 (para 80/20)
# Proceso *CON* PCA
glmFit <- train(diagnosis ~ .,
data = training,
method = "glm",
preProcess = "pca")
glmFit
pred <- predict(glmFit, newdata = testing)
confusionMatrix(pred, testing$diagnosis)
#               Accuracy : 0.71   (para 80/20)
library(Hmisc)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
A2
```{r, echo=TRUE, eval=FALSE}
# only shows the scripts
sum(1:10)
10 * 11 / 2
```
unzip("activity.zip")
getwd()
setwd("./Users/Michael/Desktop/Codes/RepData_PeerAssessment1")
getwd()
setwd("/Users/Michael/Desktop/Codes/RepData_PeerAssessment1")
getwd()
unzip("activity.zip")
unz("activity.zip")
activity <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
head(activity)
str(activity)
names(activity)
library(lattice)
dim(activity)
activity <- read.csv("activity.csv", header = TRUE, sep = ",", colClasses = c("numeric", "character", "numeric"))
str(activity)
activity$date <- as.Date(activity$date, format = "%Y-%m-%d")
activity$interval <- as.factor(activity$interval)
str(activity)
head(activity)
StepSum <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE) ## remove NA data
head(StepSum)
str(StepSum)
y = "Number of times in a day(Count)") + theme_bw()
ggplot(StepSum, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day",
y = "Number of times in a day(Count)") + theme_bw()
library(ggplot2)   ## use ggplot2 for plotting figures
plot(StepSum, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day",
y = "Number of times in a day(Count)")
ggplot(StepSum, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(StepSum, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Steps Taken per Day",
x = "Number of Steps per Day",
y = "Number of times in a day(Count)") + theme_bw()
ggplot(StepSum, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(StepSum, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 500) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Number of times in a day (Count)") + theme_bw()
ggplot(StepSum, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1500) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Number of times in a day (Count)") + theme_bw()
ggplot(StepSum, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Number of times in a day (Count)") + theme_bw()
ggplot(StepSum, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
ggplot(StepSum, aes(x = steps)) +
geom_histogram(fill = "blue", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
ggplot(Steps_Day, aes(x = steps)) +
geom_histogram(fill = "blue", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
Steps_Day <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE) ## remove NA data
ggplot(Steps_Day, aes(x = steps)) +
geom_histogram(fill = "blue", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
mean(Steps_Day$steps, na.rm=TRUE)
median(Steps_Day$steps, na.rm=TRUE)
```
Steps_Interval <- tapply(activity$steps, activity$interval,  FUN=mean, na.rm = TRUE)
str(Steps_Interval)
head(Steps_Interval)
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
head(activity)
colnames(Steps_Interval) <- c("interval", "steps")
Steps_Interval <- aggregate(activity$steps,                            by = list(interval = activity$interval),                              FUN=mean, na.rm=TRUE)
str(Steps_Interval)
head(Steps_Interval)
colnames(Steps_Interval) <- c("interval", "steps")
head(Steps_Interval)
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
head(Steps_Interval)
str(Steps_Interval)
Steps_Interval$interval <-
as.integer(levels(Steps_Interval$interval)[Steps_Interval])
head(activity)
Steps_Interval <- aggregate(activity$steps,                            by = list(interval = activity$interval),                              FUN=mean, na.rm=TRUE)
colnames(Steps_Interval) <- c("interval", "steps")
str(Steps_Interval)
head(Steps_Interval)
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +  theme_bw()
plot(interval,steps)
colnames(Steps_Interval) <- c("interval", "steps")
Steps_Interval <- aggregate(activity$steps,                            by = list(interval = activity$interval),                              FUN=mean, na.rm=TRUE)
colnames(Steps_Interval) <- c("interval", "steps")
plot(Steps_Interval$interval,Steps_Interval$steps)
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
plot(row.names(Steps_Interval), Steps_Interval, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "red")
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1)
geom_line(color="red", size=1)
p<-ggplot(Steps_Interval ) +
geom_line(color="red", size=1)
p<-ggplot(Steps_Interval, aes(x=interval, y=steps) ) +
geom_line(color="red", size=1)
p
p<-ggplot(Steps_Interval, aes(x=interval, y=steps) ) +
geom_line(color="red", size=1,aes(group=interval))
p
Steps_Interval$interval <-
as.integer(levels(Steps_Interval$interval)[Steps_Interval$interval])
str(Steps_Interval)
head(Steps_Interval)
plot(Steps_Interval$interval,Steps_Interval$steps)
p<-ggplot(Steps_Interval, aes(x=interval, y=steps) ) +
geom_line(color="red", size=1 )
p
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1,aes(group=name)) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
geom_line(color="red", size=1 ) +
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1 ) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="red", size=1 ) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
p
p<- ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1 ) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +  theme_bw()
p
p<- ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1 ) +
labs(title="Average Daily Activity Pattern", x="5-min Interval", y="Average Number of steps") +  theme_bw()
p
max_int <- which.max(Steps_Interval)
names(max_int)
p<- ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1 ) +
labs(title="Average Daily Activity Pattern", x="5-min interval", y="Average steps across all the days") +  theme_bw()
p
p<- ggplot(Steps_Interval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1 ) +
labs(title="Average Daily Activity Pattern", x="5-min interval", y="Average steps across all the days") +  theme_bw()
p
max_int <- Steps_Interval[which.max(Steps_Intervall$steps),]
max_int <- Steps_Interval[which.max(Steps_Interval$steps),]
names(max_int)
max_int
missing_data <- sum(is.na(activity$steps))
missing_data
missing_data
data <- activity
for (i in 1:nrow(data)) {
temp <- data[i, ]
if (is.na(temp$steps)) {
data$steps[i] <- subset(Steps_Interval, interval == temp$interval)$steps
}
}
sum(is.na(data))
head(data)
str(data)
data <- activity
for (i in 1:nrow(data)) {
temp <- data[i, ]
if (is.na(temp$steps)) {
data$steps[i] <- subset(Steps_Interval, interval == temp$interval)$steps
}
}
sum(is.na(data))
head(data)
str(data)
sum(is.na(data$steps))
ggplot(data, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
str(activity)
head(data)
Data_Day <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
ggplot(Data_Day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
mean(Data_Day$steps, na.rm=TRUE)
median(Data_Day$steps, na.rm=TRUE)
median(Data_Day$steps, na.rm=TRUE)
median(Data_Day$steps, na.rm=TRUE)
median(Data_Day$steps, na.rm=TRUE)
Data_Day <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
ggplot(Data_Day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
mean(Data_Day$steps, na.rm=TRUE)
median(Data_Day$steps, na.rm=TRUE)
newdata <- activity
for (i in 1:nrow(newdata)) {
temp <- newdata[i, ]
if (is.na(temp$steps)) {
newdata$steps[i] <- subset(Steps_Interval, interval == temp$interval)$steps
}
}
sum(is.na(newdata$steps))
head(newdata)
str(newdata)
Data_Day <- aggregate(steps ~ date, data = newdata, sum, na.rm = TRUE)
ggplot(Data_Day, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title="Histogram of Total Number of Steps Taken Each Day", x = "Number of Steps per Day", y = "Frequency") + theme_bw()
mean(Data_Day$steps, na.rm=TRUE)
median(Data_Day$steps, na.rm=TRUE)
wday <- weekdays(Data_Day$date)
wdayfactor <- vector()
for (i in 1:nrow(Data_Day)) {
if (wday[i] == "Saturday" | wday[i] == "Sunday" ) {
wdayfactor[i] <- "Weekend"
} else {
wdayfactor[i] <- "Weekday"
}
}
Data_Day$weekday <- wdayfactor
Data_Day$weekday  <- factor(Data_Day$wdayfactor)
wday <- weekdays(Data_Day$date)
wday
wdayfactor <- vector()
for (i in 1:nrow(Data_Day)) {
if (wday[i] == "Saturday" | wday[i] == "Sunday" ) {
wdayfactor[i] <- "Weekend"
} else {
wdayfactor[i] <- "Weekday"
}
}
Data_Day
Data_Day$weekday <- wdayfactor
Data_Day$weekday  <- factor(Data_Day$weekday)
str(Data_Day)
steps_Wday <- aggregate(steps ~ interval + weekday, data = Data_Day, mean, na.rm=TRUE)
wday <- weekdays(newdata$date)
wdayfactor <- vector()
for (i in 1:nrow(newdata)) {
if (wday[i] == "Saturday" | wday[i] == "Sunday" ) {
wdayfactor[i] <- "Weekend"
} else {
wdayfactor[i] <- "Weekday"
}
}
newdata$weekday <- wdayfactor
newdata$weekday  <- factor(newdata$weekday)
str(newdata)
steps_Wday <- aggregate(steps ~ interval + weekday, data = newdata, mean, na.rm=TRUE)
names(steps_Wday) <- c("interval", "weekday", "steps")
str(steps_Wday)
ggplot(steps_Wday, aes(x=interval, y=steps)) +
geom_line(color="blue") +
facet_wrap(~ dayofweek, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
ggplot(steps_Wday, aes(x=interval, y=steps)) +
geom_line(color="blue") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
steps_Wday$interval <-
as.integer(levels(steps_Wday$interval)[steps_Wday$interval])
ggplot(steps_Wday, aes(x=interval, y=steps)) +
geom_line(color="blue") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
